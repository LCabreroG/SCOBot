SCORM_API
Hi, the JavaScript portion of this project is split into the following sections:

SCORM_API.js - This is the main 'long-hand' SCORM 2004 with some additions to rollback to SCORM 1.2.  Please note I've only taken the 1.2 rollback so far, as it was needed on another project I worked on.  There will be cases where there just isn't enough space to store some items if your going from 2004 to 1.2.  Ok fair warning, next.

SCOBOT.js - This is a boiled down series of API's that do common things we all do in a Shareable Content Object.  This is currently a work in progress.

Local_API_1484_11.js - This is a LMS mimic as boiled down as I could get.  Its not the most strict so don't expect it to throw every single error right now.  It keeps the entire CMI object and console logs the JSON object so you can view whats changed during local testing.

You could just use the SCORM_API.js and get down the road.  But, what I've found is you commonly do things that will have to re-entering several bits of this code anyway. I'm leaving the SCOBOT open to additions and something that can be customizable.  If anything maybe just something to springboard off of.

About commonly missed onload, unload events:  There is a js/util/events.js for now that will set up some base examples for hooking into your start and exit.
You normally want to fire up SCORM when the page loads, and exit gracefully.  There are obviously many levels to this (caring), and commonly you want to choose your default exit strategy.  You may suspend, you may also finish.  Scoring, and completion status as well as success status play a part here as well.  Again, this is just the tip of the ice-burg but whether your making a glorified powerpoint or actually have some assessments, interactions and real scoring taking place, you can choose your path.

qunit_SCORM_API.html - This will run a series of 80+ tests against SCORM which include some local debug, gets and sets as well as classic Initialize, GetValue, SetValue, Commit and Terminate.  Even some illegal calls.  This whole package is great to run on a LMS to view if the LMS is compliant with SCORM.
The test for this is found at 'js/test/scorm_api.js'.

There are additional HTML based 'read me' files I've written up over the months I worked on this.  I based much the work on the fact that it's been many many years since SCORM 2004, and JavaScript has come quite a ways since those days.  Getting this into JSLint, QUnit and some more structured code made good solid sense to me.

In action at http://hivelms.com/test.html *see QUnit SCO.

Tips on Best Practices:
I highly recommend anyone who's working with JavaScript consider the use of merging and minifying or doing further and packing their files.  This is why there is not just a single file, and why I'm not setting this up as a 'release'.  It's left broken up so you can choose what you want and don't want.  There are several ways to accomplish this if your not familiar with it.
Merge would be the act of concatenating all your JavaScript files in the order that they are in within your HTML page.
Minify will remove useless tabbing, white space
Packing would be the process of shrinking variables, remove line returns and base64ing or obfuscating the code.
You'll see a 50+% reduction in size, and with gzipping can see 70-80% reduction from the source code.  This is a reduction of HTTP hits and bandwidth.
Please use JSLint to verify other code in your project will not break as a result of this.  Most common error is missing semi-colons.  Once line returns are removed, this will result in a JavaScript error.

About the Author:
I've worked on a variety of e-learning projects since 2001.  I've utilized several 3rd Party API's, and for better or worse after dealing with unmanaged JavaScript code or lacking features opted to dive into figuring this out.  I have written a LMS API_1484_11 runtime, at the same time as making the client API.  This allowed me to put the reference materials in practice and write tests that to work against the specification.
At this point, now that I have the core foundation down, I'll be turning my attention to the SCOBOT portion so this is more easily consumable to entry and mid level developers or first time e-learner developers.  Don't feel too horrible if your coming in new to this.  It took years to really consume it.  So much focus is on the content, rarely we get a chance to geek out on what makes a student pass/fail, and all the information thats needed to make that happen.  Course when I finish SCORM 20XX will be out.

Thanks for taking the time to take a look.